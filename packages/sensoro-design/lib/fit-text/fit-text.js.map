{"version":3,"sources":["fit-text/fit-text.jsx"],"names":["FitText","arguments","updateQueued","nodes","Map","updateElementStyle","element","options","width","style","fontSize","Math","min","max","compressor","minFontSize","maxFontSize","handleBodyResize","widths","forEach","push","offsetWidth","i","_renderChildren","children","props","React","Children","map","child","cloneElement","ref","c","set","_childRef","window","requestAnimationFrame","addEventListener","removeEventListener","Component","defaultProps","Number","NEGATIVE_INFINITY","POSITIVE_INFINITY"],"mappings":";;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;IACMA,O;;;;;AACF,qBAAc;AAAA;;AAAA;;AACV,kFAASC,SAAT;AACA,UAAKC,YAAL,GAAoB,KAApB;AACA,UAAKC,KAAL,GAAa,IAAIC,GAAJ,EAAb;;AACA,UAAKC,kBAAL,GAA0B,UAACC,OAAD,EAAUC,OAAV,EAAmBC,KAAnB,EAA6B;AACnDF,MAAAA,OAAO,CAACG,KAAR,CAAcC,QAAd,aAA4BC,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,GAAL,CAASL,KAAK,IAAID,OAAO,CAACO,UAAR,GAAqB,EAAzB,CAAd,EAA4CP,OAAO,CAACQ,WAApD,CAAT,EAA2ER,OAAO,CAACS,WAAnF,CAA5B;AACH,KAFD;;AAGA,UAAKC,gBAAL,GAAwB,YAAM;AAC1B,YAAKf,YAAL,GAAoB,IAApB;AACA,UAAMgB,MAAM,GAAG,EAAf;;AACA,YAAKf,KAAL,CAAWgB,OAAX,CAAmB,UAACZ,OAAD,EAAUD,OAAV,EAAsB;AACrCY,QAAAA,MAAM,CAACE,IAAP,CAAYd,OAAO,CAACe,WAApB;AACH,OAFD;;AAGA,UAAIC,CAAC,GAAG,CAAR;;AACA,YAAKnB,KAAL,CAAWgB,OAAX,CAAmB,UAACZ,OAAD,EAAUD,OAAV,EAAsB;AACrC,cAAKD,kBAAL,CAAwBC,OAAxB,EAAiCC,OAAjC,EAA0CW,MAAM,CAACI,CAAD,CAAhD;;AACAA,QAAAA,CAAC,IAAI,CAAL;AACH,OAHD;AAIH,KAXD;;AAYA,UAAKC,eAAL,GAAuB,YAAM;AAAA,UACjBC,QADiB,GACJ,MAAKC,KADD,CACjBD,QADiB;AAEzB,aAAOE,kBAAMC,QAAN,CAAeC,GAAf,CAAmBJ,QAAnB,EAA6B,UAACK,KAAD,EAAW;AAC3C,eAAOH,kBAAMI,YAAN,CAAmBD,KAAnB,EAA0B;AAC7BE,UAAAA,GAAG,EAAE,aAACC,CAAD,EAAO;AACR,gBAAIA,CAAJ,EAAO;AACH,oBAAK7B,KAAL,CAAW8B,GAAX,CAAeD,CAAf,EAAkB,MAAKP,KAAvB;AACH;;AACD,kBAAKS,SAAL,GAAiBF,CAAjB;AACH;AAN4B,SAA1B,CAAP;AAQH,OATM,CAAP;AAUH,KAZD;;AAnBU;AAgCb;;;;yCACoB;AACjB,UAAI,CAAC,KAAK9B,YAAV,EAAwB;AACpBiC,QAAAA,MAAM,CAACC,qBAAP,CAA6B,KAAKnB,gBAAlC;AACH;;AACDkB,MAAAA,MAAM,CAACE,gBAAP,CAAwB,QAAxB,EAAkC,KAAKpB,gBAAvC;AACAkB,MAAAA,MAAM,CAACE,gBAAP,CAAwB,MAAxB,EAAgC,KAAKpB,gBAArC;AACH;;;yCACoB;AACjB,WAAKA,gBAAL;AACH;;;2CACsB;AACnBkB,MAAAA,MAAM,CAACG,mBAAP,CAA2B,QAA3B,EAAqC,KAAKrB,gBAA1C;AACAkB,MAAAA,MAAM,CAACG,mBAAP,CAA2B,MAA3B,EAAmC,KAAKrB,gBAAxC;AACH;;;6BACQ;AACL,aAAO,KAAKM,eAAL,GAAuB,CAAvB,CAAP;AACH;;;;EAlDiBG,kBAAMa,S;;AAoD5BvC,OAAO,CAACwC,YAAR,GAAuB;AACnB1B,EAAAA,UAAU,EAAE,CADO;AAEnBC,EAAAA,WAAW,EAAE0B,MAAM,CAACC,iBAFD;AAGnB1B,EAAAA,WAAW,EAAEyB,MAAM,CAACE;AAHD,CAAvB;eAKe3C,O","sourcesContent":["import React from 'react';\nclass FitText extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.updateQueued = false;\n        this.nodes = new Map();\n        this.updateElementStyle = (element, options, width) => {\n            element.style.fontSize = `${Math.min(Math.max(width / (options.compressor * 10), options.minFontSize), options.maxFontSize)}px`;\n        };\n        this.handleBodyResize = () => {\n            this.updateQueued = true;\n            const widths = [];\n            this.nodes.forEach((options, element) => {\n                widths.push(element.offsetWidth);\n            });\n            let i = 0;\n            this.nodes.forEach((options, element) => {\n                this.updateElementStyle(element, options, widths[i]);\n                i += 1;\n            });\n        };\n        this._renderChildren = () => {\n            const { children } = this.props;\n            return React.Children.map(children, (child) => {\n                return React.cloneElement(child, {\n                    ref: (c) => {\n                        if (c) {\n                            this.nodes.set(c, this.props);\n                        }\n                        this._childRef = c;\n                    }\n                });\n            });\n        };\n    }\n    componentWillMount() {\n        if (!this.updateQueued) {\n            window.requestAnimationFrame(this.handleBodyResize);\n        }\n        window.addEventListener('resize', this.handleBodyResize);\n        window.addEventListener('load', this.handleBodyResize);\n    }\n    componentDidUpdate() {\n        this.handleBodyResize();\n    }\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleBodyResize);\n        window.removeEventListener('load', this.handleBodyResize);\n    }\n    render() {\n        return this._renderChildren()[0];\n    }\n}\nFitText.defaultProps = {\n    compressor: 1,\n    minFontSize: Number.NEGATIVE_INFINITY,\n    maxFontSize: Number.POSITIVE_INFINITY\n};\nexport default FitText;\n"],"file":"fit-text.js"}